from sklearn.cluster import KMeans
import pandas as pd
import random
import csv

from scipy import stats as pcs

# df = pd.read_csv("blogdata2.txt", sep="\t")

#in_txt = csv.reader(open('blogdata3.txt', "rb"), delimiter = '\t')
#out_csv = csv.writer(open('blogdataFormatted2.txt', 'wb'))

#to_csv = list(csv.reader(open('blogdata3.txt', 'rb'), delimiter='\t'))


df = pd.read_csv('blogdata3.txt', sep="\t", quoting=csv.QUOTE_NONE, index_col='Blog') #index_col=False)

#df = df.replace(r'\s', '', regex=True, inplace=True)


#pd.Series()

#print(df.dtypes)
clusters = 5
# df_dict = dict(df)

# print(df.values) # Each row
# print(df.columns.values) #each word

#############################

name_with_random = dict()
centroids = dict()
#centroids = []

for i in range(0, clusters):
    # centroid = dict()
    #c = [f'centroid{i}']c=[]
    centroids[f'centroid{i}'] = []
    for col in df:
        #if col == 'Blog':
        #    continue
        min = df[col].values.min()
        max = df[col].values.max()
        ran = random.randint(min, max)
        #print(f'col: {df[col].name}')
        #print(f'max: {df[col].values.max()}')
        #print(f'min: {df[col].values.min()}')
        #print(f'ran: {ran}')
        #name_with_random[df[col].name] = ran # Bättre med sample??
        #centroid[df[col].name] = ran
        centroids[f'centroid{i}'].append(ran)
        # c.append(ran)
    #centroids.append(c)


centroids = pd.DataFrame.from_dict(centroids, orient='index', columns=list(df.columns.values))
centroids.index.name = "Centroid"
#print(centroids.iloc[2])
#centroids.set_index("Centroids", inplace=True)
#print(centroids.loc['Centroid'])
#print(centroids.index[2])
results = {
    'centroid0': [],
    'centroid1': [],
    'centroid2': [],
    'centroid3': [],
    'centroid4': []
}
'''

'''

for k in range(0, clusters):
    for j in range (0, len(df.index)):
    #for blog in df.values:
        distance = 0
        best = ''
        name_of_best = ''
        for i in range(0, len(centroids.index)):
        # for centroid in centroids.values:
            distance = 0
            ## pearson score centroid vs all blogs
            pearson = pcs.pearsonr(centroids.iloc[i], df.iloc[j])[0] ## Use 1 for p val
            #print(pearson = pcs.pearsonr(centroid, blog))
            ## Assign to closest centroid
            # om pearson för centroid är högst
            if pearson > distance:
                distance = pearson
                best = centroids.iloc[i]
                #name_of_best = centroids.index[i]
                name_of_best = centroids.index.values[i]

                #print(name_of_best)
                #print(df.index.values[j])
                #print(distance)
                #print(centroids.index[i]) ### Get name of centroid
                results[name_of_best].append([df.index[j], distance])


#print(centroids.columns.values)
#for word in centroids.columns.values:
#    pass

results2 = {
    'centroid0': [],
    'centroid1': [],
    'centroid2': [],
    'centroid3': [],
    'centroid4': []
}

for i in range(0,100):
    for i in range(0, 5): #len(results)):
        # print(results[f'centroid{i}'])
        for word in centroids.columns.values:
            avg = 0
            for res in results[f'centroid{i}']:
                avg += res[1]

                #print(res[1])
            avg /= len(results[f'centroid{i}'])
        results2[f'centroid{i}'].append(avg)
    break

print(results2)
'''
words_with_avg = {}
for word in df.columns.values:
    print(word)
    if word == 'Blog':
        print('found blog')
        continue
    max = max(df[word])
    min = min(df[word])
    ran = random.randint(min, max)
    print(ran)
    # words_with_avg[word] = random.randint(min, max)


print(words_with_avg)
'''